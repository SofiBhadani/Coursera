********************Course 2 ************************************
*******************Data Structure in Python***********************

Week 1 

Assignment 6.5 

Question : Write code using find() and string slicing (see section 6.10) to extract the number at the end of the line below. 
           Convert the extracted value to a floating point number and print it out.
           Given string : 
                          text = "X-DSPAM-Confidence:    0.8475";
Output :
          0.87475
          
Solution :
            text = "X-DSPAM-Confidence:    0.8475";
            pos=text.find(':')
            piece=text[pos+5:pos+11]
            value=float(piece)
            print(value)
            
Week 3 

Assignment : 7.1

Question :  Write a program that prompts for a file name, then opens that file and reads through the file, 
           and print the contents of the file in upper case. Use the file words.txt to produce the output below.
           You can download the sample data at http://www.py4e.com/code3/words.txt
Output : 
           WRITING PROGRAMS OR PROGRAMMING IS A VERY CREATIVE
           AND REWARDING ACTIVITY  YOU CAN WRITE PROGRAMS FOR
           MANY REASONS RANGING FROM MAKING YOUR LIVING TO SOLVING
           A DIFFICULT DATA ANALYSIS PROBLEM TO HAVING FUN TO HELPING
           SOMEONE ELSE SOLVE A PROBLEM  THIS BOOK ASSUMES THAT
           {\EM EVERYONE} NEEDS TO KNOW HOW TO PROGRAM AND THAT ONCE
           YOU KNOW HOW TO PROGRAM, YOU WILL FIGURE OUT WHAT YOU WANT
           TO DO WITH YOUR NEWFOUND SKILLS

           WE ARE SURROUNDED IN OUR DAILY LIVES WITH COMPUTERS RANGING
           FROM LAPTOPS TO CELL PHONES  WE CAN THINK OF THESE COMPUTERS
           AS OUR PERSONAL ASSISTANTS WHO CAN TAKE CARE OF MANY THINGS
           ON OUR BEHALF  THE HARDWARE IN OUR CURRENT-DAY COMPUTERS
           IS ESSENTIALLY BUILT TO CONTINUOUSLY AS US THE QUESTION
           WHAT WOULD YOU LIKE ME TO DO NEXT

           OUR COMPUTERS ARE FAST AND HAVE VASTS AMOUNTS OF MEMORY AND
           COULD BE VERY HELPFUL TO US IF WE ONLY KNEW THE LANGUAGE TO
           SPEAK TO EXPLAIN TO THE COMPUTER WHAT WE WOULD LIKE IT TO
           DO NEXT IF WE KNEW THIS LANGUAGE WE COULD TELL THE
           COMPUTER TO DO TASKS ON OUR BEHALF THAT WERE REPTITIVE
           INTERESTINGLY, THE KINDS OF THINGS COMPUTERS CAN DO BEST
           ARE OFTEN THE KINDS OF THINGS THAT WE HUMANS FIND BORING
           AND MIND-NUMBING
           
Source Code :
                      file1=input("Enter File name ")
                      file2=open(file1)
                      for lx in file2:
	                      lx=lx.strip()
	                      print(lx.upper())
			      
			      
Assignment 7.2 

Question : Write a program that prompts for a file name, then opens that file and reads through the file, 
	   looking for lines of the form:
		X-DSPAM-Confidence:    0.8475
	   Count these lines and extract the floating point values from each of the lines and compute the average of those values and produce an output as shown below. 
	   Do not use the sum() function or a variable named sum in your solution.
	  You can download the sample data at http://www.py4e.com/code3/mbox-short.txt when you are testing below enter mbox-short.txt 
	  as the file name.
	  
Output : 
	Average spam confidence: 0.750718518519

Souce Code : 
		# Use the file name mbox-short.txt as the file name
		fname = raw_input("Enter file name: ")
		fh = open(fname)
		average = 0
		count = 0
		for line in fh:
    			if not line.startswith("X-DSPAM-Confidence:") : continue
    				pos = line.find(" ")
    				val = line[pos:].rstrip()
    				val = float(val)
    				count = count + 1
    				average = average + val
        	print ("Average spam confidence:", average/count)
		
		
Week 4 

Assignment 8.4 

Question :
		 Open the file romeo.txt and read it line by line. For each line, split the line into a list of words using the split() method. The program should build a list of words.
		 For each word on each line check to see if the word is already in the list and if not append it to the list. 
		 When the program completes, sort and print the resulting words in alphabetical order.
		You can download the sample data at http://www.py4e.com/code3/romeo.txt
	
Output :
		['Arise', 'But', 'It', 'Juliet', 'Who', 'already', 'and', 'breaks', 'east', 'envious', 'fair', 'grief', '
		is', 'kill', 'light', 'moon', 'pale', 'sick', 'soft', 'sun', 'the', 'through', 'what', 'window', 'with', 'yonder']

Source Code :
		fname = raw_input("Enter file name: ")
		fh = open(fname)
		words = list()
		for line in fh:
    			words = words + line.split()
    			words.sort()
			words2=[]

		for word in words:
			if word not in words2:
				words2.append(word)
		print (words2 )
		



